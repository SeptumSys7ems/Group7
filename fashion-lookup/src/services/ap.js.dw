import axios from 'axios';
import { auth } from '../firebase';

const API_URL = process.env.REACT_APP_API_URL;

const api = axios.create({
    baseURL: API_URL,
    headers: {
        'Content-Type': 'application/json'
    }
});

api.interceptors.request.use(async (config) => {
    if (auth.currentUser) {
        const token = await auth.currentUser.getIdToken();
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

export const analyzeImage = async (imageUrl) => {
    try {
        const response = await api.post('/analysis', { imageUrl });
        return response.data;
    } catch (error) {
        console.error('Error analyzing image:', error);
        throw error;
    }
};

// Mock data for development purposes
const mockAnalyses = {
    analyses: [
        {
            id: 'analysis1',
            imageUrl: 'https://via.placeholder.com/400x600?text=Fashion+Outfit+1',
            detectedItems: [
                { type: 'Shirt', description: 'Blue button-down shirt' },
                { type: 'Pants', description: 'Beige chinos' }
            ],
            timestamp: new Date().toISOString()
        },
        {
            id: 'analysis2',
            imageUrl: 'https://via.placeholder.com/400x600?text=Fashion+Outfit+2',
            detectedItems: [
                { type: 'Jacket', description: 'Black leather jacket' },
                { type: 'Jeans', description: 'Dark blue jeans' }
            ],
            timestamp: new Date().toISOString()
        }
    ]
};

export const getUserAnalyses = async () => {
    try {
        // Try to fetch from API first
        try {
            const response = await api.get('/analyses');
            return response.data;
        } catch (apiError) {
            console.warn('API request failed, using mock data:', apiError);
            // Fall back to mock data if API fails
            return mockAnalyses;
        }
    } catch (error) {
        console.error('Error fetching analyses:', error);
        // Still return mock data even if there's an error handling the API failure
        return mockAnalyses;
    }
};

export const getGooglePhotos = async () => {
    try {
        const response = await api.get('/photos/google');
        return response.data;
    } catch (error) {
        console.error('Error fetching Google photos:', error);
        throw error;
    }
};

export const getPinterestPins = async () => {
    try {
        const response = await api.get('/photos/pinterest');
        return response.data;
    } catch (error) {
        console.error('Error fetching Pinterest pins:', error);
        throw error;
    }
};

export default api;